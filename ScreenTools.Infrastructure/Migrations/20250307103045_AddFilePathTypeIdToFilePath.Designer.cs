// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScreenTools.Infrastructure;

#nullable disable

namespace ScreenTools.Infrastructure.Migrations
{
    [DbContext(typeof(ScreenToolsDbContext))]
    [Migration("20250307103045_AddFilePathTypeIdToFilePath")]
    partial class AddFilePathTypeIdToFilePath
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ScreenTools.Core.FilePath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FilePathTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FilePathTypeId");

                    b.ToTable("FilePaths");
                });

            modelBuilder.Entity("ScreenTools.Core.FilePathType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abrv")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FilePathTypes");
                });

            modelBuilder.Entity("ScreenTools.Core.FilePath", b =>
                {
                    b.HasOne("ScreenTools.Core.FilePathType", "FilePathType")
                        .WithMany()
                        .HasForeignKey("FilePathTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilePathType");
                });
#pragma warning restore 612, 618
        }
    }
}
